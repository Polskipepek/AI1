// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace AI1
{
    public partial class SoybeanModel
    {
        /// <summary>
        /// model input class for SoybeanModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Class")]
            public string Class { get; set; }

            [ColumnName(@"Date")]
            public float Date { get; set; }

            [ColumnName(@"Plant stand")]
            public float Plant_stand { get; set; }

            [ColumnName(@"Precip")]
            public float Precip { get; set; }

            [ColumnName(@"Temp")]
            public float Temp { get; set; }

            [ColumnName(@"Hail")]
            public float Hail { get; set; }

            [ColumnName(@"Crop hist")]
            public float Crop_hist { get; set; }

            [ColumnName(@"Area damaged")]
            public float Area_damaged { get; set; }

            [ColumnName(@"Severity")]
            public float Severity { get; set; }

            [ColumnName(@"Seed tmt")]
            public float Seed_tmt { get; set; }

            [ColumnName(@"Germination")]
            public float Germination { get; set; }

            [ColumnName(@"Plant Growth")]
            public float Plant_Growth { get; set; }

            [ColumnName(@"Leaves")]
            public float Leaves { get; set; }

            [ColumnName(@"Leafspots halo")]
            public float Leafspots_halo { get; set; }

            [ColumnName(@"Leafspots marg")]
            public float Leafspots_marg { get; set; }

            [ColumnName(@"Leafspot size")]
            public float Leafspot_size { get; set; }

            [ColumnName(@"Leaf shread")]
            public float Leaf_shread { get; set; }

            [ColumnName(@"Leaf malf")]
            public float Leaf_malf { get; set; }

            [ColumnName(@"Leaf mild")]
            public float Leaf_mild { get; set; }

            [ColumnName(@"Stem")]
            public float Stem { get; set; }

            [ColumnName(@"Lodging")]
            public float Lodging { get; set; }

            [ColumnName(@"Stem Cankers")]
            public float Stem_Cankers { get; set; }

            [ColumnName(@"Canker lesion")]
            public float Canker_lesion { get; set; }

            [ColumnName(@"Fruiting bodies")]
            public float Fruiting_bodies { get; set; }

            [ColumnName(@"External decay")]
            public float External_decay { get; set; }

            [ColumnName(@"Mycelium")]
            public float Mycelium { get; set; }

            [ColumnName(@"Int discolor")]
            public float Int_discolor { get; set; }

            [ColumnName(@"Sclerotia")]
            public float Sclerotia { get; set; }

            [ColumnName(@"Fruit pods")]
            public float Fruit_pods { get; set; }

            [ColumnName(@"Fruit spots")]
            public float Fruit_spots { get; set; }

            [ColumnName(@"Seed")]
            public float Seed { get; set; }

            [ColumnName(@"Mold growth")]
            public float Mold_growth { get; set; }

            [ColumnName(@"Seed discolor")]
            public float Seed_discolor { get; set; }

            [ColumnName(@"Seed size")]
            public float Seed_size { get; set; }

            [ColumnName(@"Shriveling")]
            public float Shriveling { get; set; }

            [ColumnName(@"Roots")]
            public float Roots { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for SoybeanModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public string Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("SoybeanModel.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
