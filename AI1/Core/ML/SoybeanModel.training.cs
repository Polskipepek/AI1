﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace AI1
{
    public partial class SoybeanModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Date", @"Date"),new InputOutputColumnPair(@"Plant stand", @"Plant stand"),new InputOutputColumnPair(@"Precip", @"Precip"),new InputOutputColumnPair(@"Temp", @"Temp"),new InputOutputColumnPair(@"Hail", @"Hail"),new InputOutputColumnPair(@"Crop hist", @"Crop hist"),new InputOutputColumnPair(@"Area damaged", @"Area damaged"),new InputOutputColumnPair(@"Severity", @"Severity"),new InputOutputColumnPair(@"Seed tmt", @"Seed tmt"),new InputOutputColumnPair(@"Germination", @"Germination"),new InputOutputColumnPair(@"Plant Growth", @"Plant Growth"),new InputOutputColumnPair(@"Leaves", @"Leaves"),new InputOutputColumnPair(@"Leafspots halo", @"Leafspots halo"),new InputOutputColumnPair(@"Leafspots marg", @"Leafspots marg"),new InputOutputColumnPair(@"Leafspot size", @"Leafspot size"),new InputOutputColumnPair(@"Leaf shread", @"Leaf shread"),new InputOutputColumnPair(@"Leaf malf", @"Leaf malf"),new InputOutputColumnPair(@"Leaf mild", @"Leaf mild"),new InputOutputColumnPair(@"Stem", @"Stem"),new InputOutputColumnPair(@"Lodging", @"Lodging"),new InputOutputColumnPair(@"Stem Cankers", @"Stem Cankers"),new InputOutputColumnPair(@"Canker lesion", @"Canker lesion"),new InputOutputColumnPair(@"Fruiting bodies", @"Fruiting bodies"),new InputOutputColumnPair(@"External decay", @"External decay"),new InputOutputColumnPair(@"Mycelium", @"Mycelium"),new InputOutputColumnPair(@"Int discolor", @"Int discolor"),new InputOutputColumnPair(@"Sclerotia", @"Sclerotia"),new InputOutputColumnPair(@"Fruit pods", @"Fruit pods"),new InputOutputColumnPair(@"Fruit spots", @"Fruit spots"),new InputOutputColumnPair(@"Seed", @"Seed"),new InputOutputColumnPair(@"Mold growth", @"Mold growth"),new InputOutputColumnPair(@"Seed discolor", @"Seed discolor"),new InputOutputColumnPair(@"Seed size", @"Seed size"),new InputOutputColumnPair(@"Shriveling", @"Shriveling"),new InputOutputColumnPair(@"Roots", @"Roots")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Date",@"Plant stand",@"Precip",@"Temp",@"Hail",@"Crop hist",@"Area damaged",@"Severity",@"Seed tmt",@"Germination",@"Plant Growth",@"Leaves",@"Leafspots halo",@"Leafspots marg",@"Leafspot size",@"Leaf shread",@"Leaf malf",@"Leaf mild",@"Stem",@"Lodging",@"Stem Cankers",@"Canker lesion",@"Fruiting bodies",@"External decay",@"Mycelium",@"Int discolor",@"Sclerotia",@"Fruit pods",@"Fruit spots",@"Seed",@"Mold growth",@"Seed discolor",@"Seed size",@"Shriveling",@"Roots"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"Class", @"Class"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(l1Regularization:0.0855817969767825F,l2Regularization:1.5387439869721F,labelColumnName:@"Class",featureColumnName:@"Features"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
